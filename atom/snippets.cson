# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing 'snip' and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#     'Console log':
#         'prefix': 'log'
#         'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.js':
    '星号注释':
        prefix: '/*'
        body: '/* $1 */'
    'function':
        prefix: 'f'
        body: '''
            function($1) {
                $2
            }
        '''
    'arrowFunction':
        prefix: 'af'
        body: '''
            ($1) => {
                $2
            }
        '''
    'namedFunction':
        prefix: 'fn'
        body: '''
            function $1($2) {
                $3
            }
        '''
    'propertyFunction':
        prefix: 'pf'
        body: '''
            $1($2) {
                $3
            },
        '''
    'methodCall':
        prefix: '.',
        body: '''
            .$1($2);
        '''
    'functionCall':
        prefix: 'c',
        body: '''
            $1($2);
        '''
    'exportDefault':
        prefix: 'ed',
        body: '''
            export default {
                $1
            };
        '''
    'exportDefaultFunction':
        prefix: 'ef',
        body: '''
            export default $1;
        '''
    'export':
        prefix: 'ex'
        body: '''
            export {
                $1
            };
        '''
    'import':
        prefix: 'im'
        body: '''
            import $1 from '$2';
        '''
    'return':
        prefix: 'r'
        body: '''
            return $1;
        '''
    'console.info':
        prefix: 'ci'
        body: '''
            console.info($1);
        '''
    'console.infoString':
        prefix: 'cis'
        body: '''
        console.info('$1');
        '''
    'console.error':
        prefix: 'ce'
        body: '''
            console.error($1);
        '''
    'console.errorString':
        prefix: 'ces',
        body: '''
            console.error('$1');
        '''
    'constDeclare':
        prefix: 'co'
        body: '''
            const $1 = $2;
        '''
    'letDeclare':
        prefix: 'lt'
        body: '''
            let $1 = $2;
        '''
